version: '3.7'

services:
  webserver:
    container_name: webserver
    build: ./express-app
    ports:
      - 3000:3000
    networks:
      - default
    depends_on:
      - postgres

  postgres:
    image: postgres:12
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - 5432:5432
    networks:
      - default
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      # create the greeting table on startup
      - ./sql/create_table.sql:/docker-entrypoint-initdb.d/create_table.sql
      # then we create the simple greeting in the greeting table
      - ./sql/insert_greeting.sql:/docker-entrypoint-initdb.d/insert_greeting.sql

  http-sender1:
    container_name: http-sender1
    build: ./golang-sender
    networks:
      - default
    # we don't want to start firing requests until the webserver is up
    depends_on:
      - webserver
      - postgres
    restart: always
    entrypoint: ["/http-sender", "http://webserver:3000", "${SUSPECT1}"]

  http-sender2:
    container_name: http-sender2
    build: ./golang-sender
    networks:
      - default
    # we don't want to start firing requests until the webserver is up
    depends_on:
      - webserver
      - postgres
    restart: always
    entrypoint: ["/http-sender", "http://webserver:3000", "${SUSPECT2}"]

  http-sender3:
    container_name: http-sender3
    build: ./golang-sender
    networks:
      - default
    # we don't want to start firing requests until the webserver is up
    depends_on:
      - webserver
      - postgres
    restart: always
    entrypoint: ["/http-sender", "http://webserver:3000", "${SUSPECT3}"]

  http-sender4:
    container_name: http-sender4
    build: ./golang-sender
    networks:
      - default
    # we don't want to start firing requests until the webserver is up
    depends_on:
      - webserver
      - postgres
    restart: always
    entrypoint: ["/http-sender", "http://webserver:3000", "${SUSPECT4}"]

  http-sender5:
    container_name: http-sender5
    build: ./golang-sender
    networks:
      - default
    # we don't want to start firing requests until the webserver is up
    depends_on:
      - webserver
      - postgres
    restart: always
    entrypoint: ["/http-sender", "http://webserver:3000", "${SUSPECT5}"]

networks:
  default:
    name: tcpdump-mystery
    driver: bridge
