version: '3.7'

services:
  webserver:
    container_name: webserver
    build: ./express-app
    ports:
      - 3000:3000
    networks:
      - default

  http-sender1:
    container_name: http-sender1
    build: ./golang-sender
    networks:
      - default
    # we don't want to start firing requests until the webserver is up
    depends_on:
      - webserver
    restart: always
    entrypoint: ["/http-sender", "http://webserver:3000", "10"]

  http-sender2:
    container_name: http-sender2
    build: ./golang-sender
    networks:
      - default
    # we don't want to start firing requests until the webserver is up
    depends_on:
      - webserver
    restart: always
    entrypoint: ["/http-sender", "http://webserver:3000", "10"]

  http-sender3:
    container_name: http-sender3
    build: ./golang-sender
    networks:
      - default
    # we don't want to start firing requests until the webserver is up
    depends_on:
      - webserver
    restart: always
    entrypoint: ["/http-sender", "http://webserver:3000", "10"]

  http-sender4:
    container_name: http-sender4
    build: ./golang-sender
    networks:
      - default
    # we don't want to start firing requests until the webserver is up
    depends_on:
      - webserver
    restart: always
    entrypoint: ["/http-sender", "http://webserver:3000", "10"]

  http-sender5:
    container_name: http-sender5
    build: ./golang-sender
    networks:
      - default
    # we don't want to start firing requests until the webserver is up
    depends_on:
      - webserver
    restart: always
    entrypoint: ["/http-sender", "http://webserver:3000", "10"]

networks:
  default:
    name: tcpdump-mystery
    driver: bridge
